# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI demo GitHub Actions

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

        # Use preinstalled PostgreSQL
      - name: Start PostgreSQL on Ubuntu
        run: |
          sudo systemctl start postgresql.service
          pg_isready

        # Change database name to meet your requirements
      - name: Create additional database
        run: |
          sudo -u ${{ vars.POSTGRES_USR }} createdb --owner=${{ vars.POSTGRES_USR }} ${{ vars.POSTGRES_DB }}
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql --username=${{ vars.POSTGRES_USR }} --host=${{ vars.POSTGRES_HOST }} --list timetable
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql --username=${{ vars.POSTGRES_USR }} --host=${{ vars.POSTGRES_HOST }} --dbname=${{ vars.POSTGRES_DB }} --command="CREATE SCHEMA demo;"

      - name: Build with Maven
        env:
          POSTGRES_USER: ${{ vars.POSTGRES_USR }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
        run: mvn clean install